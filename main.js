!function(){"use strict";class e{constructor(e){this._popup=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}_handleEscClose(e){"Escape"===e.key&&this.close()}open(){this._popup.classList.add("popup_open"),document.addEventListener("keyup",this._handleEscClose)}close(){this._popup.classList.remove("popup_open"),document.removeEventListener("keyup",this._handleEscClose)}setEventListeners(){this._popup.addEventListener("mousedown",(e=>{(e.target.classList.contains("popup")||e.target.classList.contains("popup__close-button"))&&this.close()}))}}class t extends e{constructor(e,t){super(e),this._handleSubmit=t,this._form=this._popup.querySelector(".form"),this._buttonSubmit=this._popup.querySelectorAll(".popup__submit-button"),this._buttonSubmitText=this._buttonSubmit.textContent,this._inputs=[...this._form.querySelectorAll(".form__input")]}_getInputValues(){const e={};return this._inputs.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit(this._getInputValues())}))}loadingRender(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"saving...";this._buttonSubmit.textContent=e?t:this._buttonSubmitText}close(){super.close(),this._form.reset()}}function s(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class n{constructor(e,t,n,i,o,r){s(this,"removeCard",(()=>{this._elementContent.remove(),this._elementContent=null})),s(this,"_addEventListeners",(()=>{this._elementImage.addEventListener("click",(()=>this._handeImageClick(this._data))),this._deleteButton.addEventListener("click",this._handleDelete),this._likeButton.addEventListener("click",this._handeLikeIcon)})),s(this,"_getElement",(()=>this._elementTemplate.querySelector(".element").cloneNode(!0))),this._elementTemplate=document.querySelector(n).content,this._data=e,this._text=e.name,this._link=e.link,this._id=e._id,this._handeImageClick=i,this._handleDelete=o,this._userId=t,this._ownerId=e.owner._id,this._likes=e.likes,this._handeLikeIcon=r}getId(){return this._id}getUrl(){return this._link}setLikes(e){this._likes=e,this._elementContent.querySelector(".element__like").textContent=this._likes.length,this.isLiked()?this._likeButton.classList.add("element__button_liked"):this._likeButton.classList.remove("element__button_liked")}isLiked(){return this._likes.find((e=>e._id===this._userId))}createElement(){return this._elementContent=this._getElement(),this._elementContent.querySelector(".element__name").textContent=this._data.name,this._likeButton=this._elementContent.querySelector(".element__like-button"),this._elementImage=this._elementContent.querySelector(".element__image"),this._deleteButton=this._elementContent.querySelector(".element__delete-button"),this._elementImage.src=this._data.link,this._elementImage.alt="Picture of ".concat(this._data.name),this._ownerId!==this._userId&&(this._elementContent.querySelector(".element__delete-button").style.display="none"),this.setLikes(this._likes),this._addEventListeners(),this._elementContent}}function i(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class o{constructor(e,t){i(this,"_toggleInputError",(e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e)})),i(this,"_showInputError",(e=>{const t=this._formElement.querySelector("#"+e.id+"-error");e.classList.add(this._settings.inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._settings.errorClass)})),i(this,"_hideInputError",(e=>{const t=this._formElement.querySelector("#"+e.id+"-error");e.classList.remove(this._settings.inputErrorClass),t.textContent="",t.classList.remove(this._settings.errorClass)})),i(this,"_enableButton",(()=>{this._submitButton.disabled=!1,this._submitButton.classList.remove(this._settings.inactiveButtonClass)})),i(this,"disableButton",(()=>{this._submitButton.disabled=!0,this._submitButton.classList.add(this._settings.inactiveButtonClass)})),i(this,"_toggleButton",(()=>{this._hasValidInputs()?this._enableButton():this.disableButton()})),i(this,"_hasValidInputs",(()=>this._inputList.every((e=>!0===e.validity.valid)))),this._settings=e,this._formElement=t,this._inputList=[...this._formElement.querySelectorAll(this._settings.inputSelector)],this._submitButton=this._formElement.querySelector(this._settings.submitButtonSelector)}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._toggleInputError(e),this._toggleButton()}))}))}resetValidation(){this._toggleButton(),this._inputList.forEach(this._hideInputError)}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}const r=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}getUserInfo(){return fetch(this._baseUrl+"/users/me",{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}getCards(){return fetch(this._baseUrl+"/cards",{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}editProfile(e,t){return fetch(this._baseUrl+"/users/me",{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}addCard(e,t){return fetch(this._baseUrl+"/cards",{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}deleteCard(e){return fetch(this._baseUrl+"/cards/"+e,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}editAvatar(e){return fetch(this._baseUrl+"/users/me/avatar",{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}likeCard(e){return fetch(this._baseUrl+"/cards/likes/"+e,{method:"PUT",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}disLikeCard(e){return fetch(this._baseUrl+"/cards/likes/"+e,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"c123cc4f-c402-4ef4-8941-71c4e0fadea6","Content-Type":"application/json"}});class l extends e{setAction(e){this._submitHandler=e}setEventListeners(){super.setEventListeners(),this._popup.addEventListener("submit",(e=>{e.preventDefault(),this._submitHandler()}))}}const a=document.querySelector(".profile__image"),_=document.querySelector(".profile__image-change"),h=new l(".popup_type_delete"),u=new l(".popup_type_change-avatar"),c=document.querySelector(".profile__edit-button"),d=document.querySelector(".form__input"),m=document.querySelector(".form__input:last-of-type"),p=document.querySelector(".form_type_profile"),b=(document.querySelector(".elements").querySelector(".elements__list"),document.querySelector(".popup_type_change-avatar")),f=document.querySelector(".profile__add-button"),g=document.querySelector(".form_type_add-place"),y={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".popup__submit-button",inactiveButtonClass:"popup__submit-button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__error_visible"};let v;a.onmouseover=function(){_.style.display="block",a.style.opacity="0.2"},_.onmouseover=function(){_.style.display="block",a.style.opacity="0.2"},a.onmouseout=function(){_.style.display="none",a.style.opacity="1"},h.setEventListeners(),a.addEventListener("click",(()=>{u.open()})),Promise.all([r.getCards(),r.getUserInfo()]).then((e=>{let[t,s]=e;v=s._id,j.renderItems(t),k.setUserInfo(s.name,s.about,s.avatar)}));const E=e=>{const t=new n(e,v,"#element-template",(()=>{q.open(e.name,e.link)}),(()=>{h.open(),h.setAction((()=>{r.deleteCard(t.getId()).then((e=>{console.log("delete"),t.removeCard(),h.close()}))}))}),(()=>{t.isLiked()?r.disLikeCard(t.getId()).then((e=>{t.setLikes(e.likes),console.log("res",e)})):r.likeCard(t.getId()).then((e=>{t.setLikes(e.likes),console.log("res",e)}))}));j.addItem(t.createElement())},k=new class{constructor(e){let{nameSelector:t,jobSelector:s}=e;this._name=document.querySelector(t),this._job=document.querySelector(s),this._userAvatar=document.querySelector(".profile__image")}getUserInfo(){return{name:this._name.textContent,job:this._job.textContent}}setUserInfo(e,t,s){this._name.textContent=e,this._job.textContent=t,this._userAvatar.src=s}}({nameSelector:".profile__info-title",jobSelector:".profile__info-class",avatarSelector:".profile__image"});new t(".popup_type_change-avatar",(e=>{r.editAvatar(e.avatar).then((e=>{console.log("res",e)}))})).setEventListeners();const L=new t(".popup_type_add-place",(e=>{L.loadingRender(!0,"Saving..."),r.addCard(e["card-title"],e.link).then((e=>{E(e)})).catch(console.log).finally((()=>L.loadingRender(!1))),L.close()})),S=new t(".popup_type_edit-profile",(e=>{S.loadingRender(!0,"Saving..."),r.editProfile(e.fullName,e.className).then((t=>{k.setUserInfo(e.fullName,e.className),console.log("res editProfile =>",t)})).catch(console.log).finally((()=>{S.close()}))}));S.setEventListeners(),L.setEventListeners();const C=new o(y,p),I=new o(y,g);new o(y,b).enableValidation();const q=new class extends e{constructor(e){super(e),this._caption=this._popup.querySelector(".popup__caption"),this._image=this._popup.querySelector(".popup__image")}open(e,t){super.open(),this._caption.textContent=e,this._image.src=t,this._image.alt="Photo of ".concat(e)}}(".popup_type_image-preview");q.setEventListeners();const j=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}renderItems(e){e.forEach(this._renderer)}addItem(e){this._container.prepend(e)}}({renderer:E},".elements__list");c.addEventListener("click",(()=>{(()=>{const e=k.getUserInfo();d.value=e.name,m.value=e.job})(),S.open()})),C.enableValidation(),I.enableValidation(),f.addEventListener("click",(()=>{L.open(),I.resetValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,